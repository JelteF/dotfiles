silent! set encoding=utf-8
scriptencoding utf-8
" -------------- Auto Commands -----------

" Automatically reload vimrc when it's saved
augroup ReloadVimrc
    au!
    au BufWritePost .vimrc so ~/.vimrc
    au BufWritePost ~/dotfiles/vim/vimrc so ~/.vimrc
augroup end

if &shell =~# 'fish$'
    set shell=sh
endif

" 80-char line coloring
if exists('+colorcolumn')
    set colorcolumn=80
endif

augroup NoTrailingWhiteSpace
    " Remove all trailing whitespace
    autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif
augroup end

" cd into the dir that the file is in
"autocmd BufEnter * execute "chdir ".escape(expand("%:p:h"), ' ')
"set autochdir

" If textfile, wrap at 80
augroup SetWrapperForTextFiles
    au!
    au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt,tex} setlocal tw=80 spell
augroup END


" Restore cursor position when opening file
augroup JumpCursorOnEdit
    au!
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") |
        \ exe "normal! g`\"" |
    \ endif
augroup END

if exists('+undofile')
  " undofile - This allows you to use undos after exiting and restarting
  " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
  " :help undo-persistence
  " This is only present in 7.3+
  if isdirectory($HOME . '/.vim/undo') == 0
    :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
  endif
  set undodir=./.vim-undo//
  set undodir+=~/.vim/undo//
  set undofile
endif

" Automatically set paste on Ctrl+V (https://coderwall.com/p/if9mda/)
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let l:tmux_start = "\<Esc>Ptmux;"
  let l:tmux_end = "\<Esc>\\"

  return l:tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . l:tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ''
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" Neovim reload fix https://github.com/neovim/neovim/issues/2127#issuecomment-150954047
augroup AutoSwap
    autocmd!
    autocmd SwapExists *  call AS_HandleSwapfile(expand('<afile>:p'), v:swapname)
augroup END

function! AS_HandleSwapfile (filename, swapname)
    " if swapfile is older than file itself, just get rid of it
    if getftime(v:swapname) < getftime(a:filename)
            call delete(v:swapname)
            let v:swapchoice = 'e'
    endif
endfunction
autocmd CursorHold,BufWritePost,BufReadPost,BufLeave *
  \ if isdirectory(expand("<amatch>:h")) | let &swapfile = &modified | endif

augroup checktime
    au!
    if !has("gui_running")
        "silent! necessary otherwise throws errors when using command
        "line window.
        autocmd BufEnter,CursorHold,CursorHoldI,CursorMoved,CursorMovedI,FocusGained,BufEnter,FocusLost,WinLeave * checktime
    endif
augroup END

" -------------- Plugins ---------

filetype off

call plug#begin('~/.vim/plugged')

"Plug Plugins
Plug 'scrooloose/nerdtree'
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-fugitive'
Plug 'majutsushi/tagbar'
Plug 'godlygeek/tabular'
Plug 'mileszs/ack.vim'
Plug 'rking/ag.vim'
Plug 'sjl/gundo.vim'
Plug 'danro/rename.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-unimpaired'
Plug 'bling/vim-airline'
Plug 'chrisbra/csv.vim'
Plug 'dag/vim-fish'
Plug 'thomwiggers/vim-colors-solarized'
Plug 'fidian/hexmode'
Plug 'edkolev/tmuxline.vim'
Plug 'benekastah/neomake'
Plug 'Shougo/deoplete.nvim'

"Plug syntax
Plug 'hynek/vim-python-pep8-indent'
Plug 'hail2u/vim-css3-syntax'
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'cakebaker/scss-syntax.vim'
Plug 'groenewege/vim-less'
Plug 'syngan/vim-vimlint'
Plug 'ynkdir/vim-vimlparser'
Plug 'kchmck/vim-coffee-script'
Plug 'digitaltoad/vim-jade'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'cespare/vim-toml'
Plug 'hdima/python-syntax'
Plug 'vzh/vim-dokuwiki'
Plug 'seveas/bind.vim'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'fatih/vim-go'
Plug 'rust-lang/rust.vim'


call plug#end()            " required

"vim general ignores
set wildignore+=*.so,*.swp,*.zip,*.exe,*.dll,*.pyc,*.pdf,*.dvi,*.aux
set wildignore+=*.png,*.jpg,*.gif

"ctrlp ignores
let g:ctrlp_custom_ignore = {
  \ 'dir': 'build\|node_modules\|venv\|python2_source\|_minted-',
  \ 'file': '.\(exe\|o|dll\|toc\|log\|out\|fls\|bcf\|bbl\|blg\|fdb_latexmk\|gls\|glg\|alg\|acr\|run.xml\|ist\|glo\|upb\|upa\|acn\)$'
  \ }

"Set toggle for graphical undo plugin
nnoremap <F12> :GundoToggle<CR>

let g:python_highlight_all = 1

"No automatic setting of tmuxline stuff
let g:airline#extensions#tmuxline#enabled = 0

" Enable deoplete
let g:deoplete#enable_at_startup = 1

let g:neomake_rust_enabled_makers = [] " disable rustc cargo is better

augroup SyntaxCheckOnFileSave
    au!
    autocmd BufWritePost * Neomake
    autocmd BufWritePost *.rs Neomake! cargo
augroup end

" -------------- Global ----------

set background=dark
colorscheme solarized
highlight SignColumn ctermbg=8


" Shows what you're typing as a command
set showcmd

" Include custom vimrc
if filereadable('.vim.custom')
    so .vim.custom
endif

" Folding
set foldmethod=indent
set nofoldenable
set foldnestmax=10
set foldlevel=1

" Indenting
set smartindent
set autoindent
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4
set softtabstop=4
set breakindent

" Proper syntax highlighting
filetype plugin indent on
syntax on

augroup SetFileTypes
    au!
    au BufRead,BufNewFile **.htm set filetype=jinja
    au BufRead,BufNewFile **.cvc set filetype=c
    au BufRead,BufNewFile **.doku set filetype=dokuwiki
    au BufRead,BufNewFile **.md set filetype=markdown.pandoc
augroup end

let g:pandoc#syntax#conceal#use=0

augroup FileTypeSpecificSettings
    " Vim is very slow when cursorline is set in latex
    autocmd FileType tex setlocal nocursorline

    " Smaller indentation for xml type files
    au FileType xml,xslt,xsd,dtd setlocal shiftwidth=2 tabstop=2 softtabstop=2
augroup end

" Fix stupid # to start of line
inoremap # X<BS>#

" Set english spellchecking, but only if turned on
if v:version > 700
    set spelllang=en spell
    set nospell
endif

" LaTeX plugin settings
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'

" Use powerline fonts
let g:airline_powerline_fonts = 1

" Ruler rules
set ruler

" Always show the statusbar
set laststatus=2

" Tab completion
set wildmenu
set wildmode=list:longest,full

" Enable mouse
set mouse=a

" Casing
set ignorecase
set smartcase

" The smash escape
inoremap htn <esc>
inoremap hnt <esc>
inoremap thn <esc>
inoremap tnh <esc>
inoremap nth <esc>
inoremap nht <esc>


" hl search results
set hlsearch

" When I close a tab, remove the buffer
set nohidden

" Set of the other paren
highlight MatchParen ctermbg=4

" Set 7 lines to the curors when moving vertical
set scrolloff=7

" increased search
set incsearch

" It's a kinda
set magic

" show matching bracket
set showmatch

" word wrapping at line breaks
set wrap
set linebreak

" Highlight current line
set cursorline

" Make backspace work
set backspace=indent,eol,start

" BASH
set shell=bash

" Save swp file quicker
set updatetime=750

" -------- Mappings ----------

"Set the mapleader
let g:mapleader = ','

"Toggle line numbers with leader-l
set number

function! NumberToggle()
  if(&number != 1)
    set number
  else
    set nonumber
  endif
endfunc

nnoremap <leader>l :call NumberToggle()<cr>

" Tab configuration
noremap <leader>tn :tabnew<cr>
noremap <leader>te :tabedit
noremap <leader>tc :tabclose<cr>
noremap <leader>tm :tabmove

" Reselect visual block after indend/outdent
vnoremap < <gv
vnoremap > >gv

"Open last alternate buffer
noremap <leader><leader> <C-^>

" Press F3 for no smart vim stuff when pasting (autoindent)
" set pastetoggle=<F3>

"Move blocks of text up and down with the arrow keys
noremap <down> :m '>+1<CR>gv=gv
vnoremap <up> :m '<-2<CR>gv=gv

"Underline/overline current line
"nnoremap <leader>== yyPv$r=jyypv$r=
"nnoremap <leader>** yyPv$r*jyypv$r*
"nnoremap <leader>= yypv$r=
"nnoremap <leader>- yypv$r-
"nnoremap <leader>^ yypv$r^
"nnoremap <leader>" yypv$r"

"Clipboard copy pasting
vnoremap <F6> :!xclip -f -sel clip<CR>
noremap <F7> mz:-1r !xclip -o -sel clip<CR>`z

"Make Y work like D and C
map Y y$

" Fix indenting in entire file without moving cursor
"noremap <silent> <F1> mzgg=G`zzz

" Write, pdflatex and open it up
nnoremap <silent> <F4> :w<CR>:!latexmk --lualatex --shell-escape % <CR><CR>

" Make and view pdf
" nnoremap <silent> <F4> :w<CR>:!make && F=% && evince ${F\%.*}.pdf<CR><CR>

" Make
nnoremap <silent> <F2> :w<CR>:!make<CR><CR>


" Make j, k and A work as expected with wrapped lines
nnoremap <silent> j gj
nnoremap <silent> k gk
nnoremap <silent> V :silent! vunmap j<cr>:silent! vunmap k<cr>V
nnoremap <silent> v :vnoremap j gj<cr>:vnoremap k gk<cr>v
vnoremap <silent> V <esc>:silent! vunmap j<cr>:silent! vunmap k<cr>gvV
vnoremap <silent> v <esc>:vnoremap j gj<cr>:vnoremap k gk<cr>gvv
nnoremap <silent> A :call BetterA()<CR>

function! BetterA()
    normal g$
    let l:wrappos = getcurpos()
    normal $
    let l:fullend = getcurpos()
    call setpos('.', l:wrappos)


    if (l:fullend[2] == l:wrappos[2])
        call feedkeys('a')
    else
        call feedkeys('i')
    endif
endfunction

" Toggle folds with space
"nnoremap <space> za

" Swap ; and : since you use the last one way more often, so why make it
" harder
nnoremap ; :

"Easier split window navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
inoremap <C-h> <C-o><C-w>h
inoremap <C-j> <C-o><C-w>j
inoremap <C-k> <C-o><C-w>k
inoremap <C-l> <C-o><C-w>l
nnoremap <up> <C-w>k
nnoremap <down> <C-w>j
nnoremap <left> <C-w>h
nnoremap <right> <C-w>l
" Fix mapping of <C-j> so it doesn't get overwritten
noremap <SID>I_wonâ€™t_ever_type_thiseuehauntauhnaeha <Plug>IMAP_JumpForward

" Workaround for https://github.com/neovim/neovim/issues/2048
if has('nvim')
    nmap <BS> <C-W>h
endif

" Better split window opening
set splitbelow
set splitright


"Turn of highlight
noremap <silent><leader>/ :nohls<CR>

" Tab for autocompletion
function! SuperTab()
    if (strpart(getline('.'),col('.')-2,1)=~'^\W\?$')
        return "\<Tab>"
    else
        return "\<C-n>"
    endif
endfunction
inoremap <Tab> <C-R>=SuperTab()<CR>
