silent! set encoding=utf-8
scriptencoding utf-8
" -------------- Auto Commands -----------

" Automatically reload vimrc when it's saved
augroup ReloadVimrc
    au!
    au BufWritePost .vimrc so ~/.vimrc
    au BufWritePost ~/dotfiles/vim/vimrc so ~/.vimrc
augroup end

if &shell =~# 'fish$'
    set shell=sh
endif

" 80-char line coloring
if exists('+colorcolumn')
    set colorcolumn=80
endif

augroup NoTrailingWhiteSpace
    au!
    " Remove all trailing whitespace
    " autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif
augroup end

" cd into the dir that the file is in
"autocmd BufEnter * execute "chdir ".escape(expand("%:p:h"), ' ')
"set autochdir

" If textfile, wrap at 80
augroup SetWrapperForTextFiles
    au!
    au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt,tex} setlocal tw=80 spell
augroup END


" Restore cursor position when opening file
augroup JumpCursorOnEdit
    au!
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") |
        \ exe "normal! g`\"" |
    \ endif
augroup END

if exists('+undofile')
  " undofile - This allows you to use undos after exiting and restarting
  " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
  " :help undo-persistence
  " This is only present in 7.3+
  if isdirectory($HOME . '/.vim/undo') == 0
    :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
  endif
  set undodir=./.vim-undo//
  set undodir+=~/.vim/undo//
  set undofile
endif

" Automatically set paste on Ctrl+V (https://coderwall.com/p/if9mda/)
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let l:tmux_start = "\<Esc>Ptmux;"
  let l:tmux_end = "\<Esc>\\"

  return l:tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . l:tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ''
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" Neovim reload fix https://github.com/neovim/neovim/issues/2127#issuecomment-150954047
augroup AutoSwap
    autocmd!
    autocmd SwapExists *  call AS_HandleSwapfile(expand('<afile>:p'), v:swapname)
augroup END

function! AS_HandleSwapfile (filename, swapname)
    " if swapfile is older than file itself, just get rid of it
    if getftime(v:swapname) < getftime(a:filename)
            call delete(v:swapname)
            let v:swapchoice = 'e'
    endif
endfunction
autocmd CursorHold,BufWritePost,BufReadPost,BufLeave *
  \ if isdirectory(expand("<amatch>:h")) | let &swapfile = &modified | endif

augroup checktime
    au!
    if !has("gui_running")
        "silent! necessary otherwise throws errors when using command
        "line window.
        autocmd BufEnter,CursorHold,CursorHoldI,CursorMoved,CursorMovedI,FocusGained,BufEnter,FocusLost,WinLeave * checktime
    endif
augroup END

" -------------- Plugins ---------

filetype off

call plug#begin('~/.vim/plugged')

"Plug Plugins
Plug 'scrooloose/nerdtree'
"Plug 'ctrlpvim/ctrlp.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-fugitive'
Plug 'majutsushi/tagbar'
Plug 'godlygeek/tabular'
"Plug 'mileszs/ack.vim'
"Plug 'rking/ag.vim'
Plug 'sjl/gundo.vim'
Plug 'danro/rename.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-unimpaired'
Plug 'bling/vim-airline'
Plug 'chrisbra/csv.vim'
Plug 'dag/vim-fish'
Plug 'chriskempson/base16-vim'
Plug 'fidian/hexmode'
Plug 'edkolev/tmuxline.vim'
Plug 'neomake/neomake'
Plug 'davidhalter/jedi-vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'ryanoasis/vim-devicons'
Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'
Plug 'google/vim-glaive'


"Auto completion
if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    Plug 'zchee/deoplete-jedi'
    Plug 'sebastianmarkow/deoplete-rust'
    Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }
    Plug 'steelsojka/deoplete-flow'
    Plug 'fishbullet/deoplete-ruby'
    Plug 'zchee/deoplete-go', { 'do': 'make'}
endif

"Plug syntax
Plug 'JelteF/vim-python-pep8-indent', { 'branch': 'gq-fix' }
Plug 'hail2u/vim-css3-syntax'
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'cakebaker/scss-syntax.vim'
Plug 'groenewege/vim-less'
Plug 'syngan/vim-vimlint'
Plug 'ynkdir/vim-vimlparser'
Plug 'kchmck/vim-coffee-script'
Plug 'digitaltoad/vim-jade'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'cespare/vim-toml'
Plug 'JelteF/python-syntax', { 'branch': 'multiline-names' }
Plug 'vzh/vim-dokuwiki'
Plug 'seveas/bind.vim'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'fatih/vim-go'
Plug 'rust-lang/rust.vim'
Plug 'mxw/vim-jsx'
Plug 'jez/vim-github-hub'
Plug 'voxpupuli/vim-puppet'
Plug 'junegunn/vader.vim'
Plug 'nginx/nginx', {'rtp': 'contrib/vim'}
Plug 'luochen1990/rainbow'
Plug 'martinda/Jenkinsfile-vim-syntax'


call plug#end()            " required

call glaive#Install()
Glaive codefmt plugin[mappings]

let g:python_host_prog = '/sbin/python2'
let g:python3_host_prog = '/sbin/python3'
let g:rainbow_active = 1

let g:rainbow_conf = {
\   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
\   'ctermfgs': ['magenta', 'DarkYellow', 'DarkGreen', 'DarkBlue'],
\   'operators': '_,_',
\   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\   'separately': {
\       '*': {},
\       'vim': {
\           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
\       },
\       'html': {
\           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
\       },
\    }
\ }

nnoremap <C-p> :FZF<cr>

"vim general ignores
set wildignore+=*.so,*.swp,*.zip,*.exe,*.dll,*.pyc,*.pdf,*.dvi,*.aux
set wildignore+=*.png,*.jpg,*.gif

let g:extesions_ignore = ['exe'
            \'bcf', 'bbl', 'blg', 'fdb_latexmk', 'gls', 'glg', 'alg', 'acr',
            \'run.xml', 'ist', 'glo', 'upb', 'upa', 'acn', 'svg', 'jpeg', 'jpg',
            \'png', 'pyc', '*.pyc']
let g:ignore_fzf = ['build', 'node_modules', 'venv', 'python2_source',
            \'_minted-', '.sass-cache', 'dist',
            \'.git', '.svn', '.hg', '.keep']
"ctrlp ignores
let g:ctrlp_custom_ignore = {
  \ 'dir': 'build\|node_modules\|venv\|python2_source\|_minted-\|\.sass-cache\|dist',
  \ 'file': '.\(exe\|o|dll\|toc\|log\|out\|fls\|bcf\|bbl\|blg\|fdb_latexmk\|gls\|glg\|alg\|acr\|run.xml\|ist\|glo\|upb\|upa\|acn\|svg\|jpeg\|jpg\|png\)$'
  \ }

if executable('rg')
    let $FZF_DEFAULT_COMMAND = 'rg --hidden --ignore-file ~/.vim/fzf_ignore --files'
else
    let $FZF_DEFAULT_COMMAND = 'ag --hidden ' .
                \'--ignore "*.' . join(g:extesions_ignore, '" --ignore "*.') . '" ' .
                \'--ignore "' . join(g:ignore_fzf, '" --ignore "') . '" ' .
                \'-g ""'
endif

"Set toggle for graphical undo plugin
nnoremap <F12> :GundoToggle<CR>

let g:python_highlight_all = 1

"No automatic setting of tmuxline stuff
let g:airline#extensions#tmuxline#enabled = 0

" Enable deoplete
if has("nvim")
    let g:deoplete#enable_at_startup = 1
endif

let g:neomake_javascript_enabled_makers = ['eslint', 'flow']
let g:neomake_jsx_enabled_makers = ['eslint', 'flow']
let g:neomake_java_enabled_makers = []
let g:javascript_plugin_flow = 1
let g:neomake_autolint_sign_column_always = 1

augroup SyntaxCheckOnFileSave
    au!
    autocmd BufWritePost * Neomake
augroup end

let g:jedi#completions_enabled = 0
autocmd BufWinEnter '__doc__' setlocal bufhidden=delete

let g:deoplete#sources#jedi#show_docstring = 0
let g:deoplete#sources#rust#racer_binary='/home/jelte/.cargo/bin/racer'
let g:deoplete#sources#rust#rust_source_path= system('rustc --print sysroot')[:-2] . '/lib/rustlib/src/rust/src'


let g:flow#enable = 0

nmap <space> [fzf]
nnoremap [fzf] <nop>

nnoremap <silent> [fzf]/ :<C-u>Ag<cr>

let g:hexmode_autodetect = 1

" Use deoplete.
let g:tern_request_timeout = 1
let g:tern_show_signature_in_pum = '0'  " This do disable full signature type on autocomplete

"Add extra filetypes
let g:tern#filetypes = [
                \ 'jsx',
                \ 'javascript.jsx',
                \ 'vue'
                \ ]

" Use tern_for_vim.
let g:tern#command = ["tern"]
let g:tern#arguments = ["--persistent"]

" Go settings
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
"let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
"let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
"let g:go_highlight_structs = 1
"let g:go_highlight_types = 1

"let g:go_auto_sameids = 1

let g:go_auto_type_info = 1

let g:go_fmt_command = "goimports"

" -------------- Global ----------

set background=dark
try
    let base16colorspace=256
    colorscheme base16-harmonic16-dark
catch /^Vim\%((\a\+)\)\=:E185/
    " deal with it
endtry
highlight SignColumn ctermbg=8


" Shows what you're typing as a command
set showcmd

" Include custom vimrc
if filereadable('.vim.custom')
    so .vim.custom
endif

" Folding
set foldmethod=indent
set nofoldenable
set foldnestmax=10
set foldlevel=1

" Indenting
set smartindent
set autoindent
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4
set softtabstop=4
if exists('&breakindent')
    set breakindent
    set breakindentopt=shift:6
endif

" Show tabs and trailing whitespace
set list
set listchars=tab:>-,trail:~

" Proper syntax highlighting
filetype plugin indent on
syntax on

augroup SetFileTypes
    au!
    au BufRead,BufNewFile **.htm,**.html,**.email set filetype=jinja
    au BufRead,BufNewFile **.cvc set filetype=c
    au BufRead,BufNewFile **.doku set filetype=dokuwiki
    au BufRead,BufNewFile **.md set filetype=markdown.pandoc
augroup end

let g:pandoc#syntax#conceal#use=0


nnoremap <leader>d gd
augroup FileTypeSpecificSettings
    " Vim is very slow when cursorline is set in latex
    au!
    autocmd FileType tex setlocal nocursorline

    " Smaller indentation for xml type files
    au FileType scss,html,xml,xslt,xsd,dtd,proto,yaml setlocal shiftwidth=2 tabstop=2 softtabstop=2

    au FileType go setlocal nolist
    au FileType go nnoremap gc :GoCoverageToggle<cr>
    au FileType go nnoremap <leader>i :GoImports<cr>

    au FileType proto AutoFormatBuffer clang-format

augroup end


" Fix stupid # to start of line
inoremap # X<BS>#

" Set english spellchecking, but only if turned on
if v:version > 700
    set spelllang=en spell
    set nospell
endif

" LaTeX plugin settings
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'

" Use powerline fonts
let g:airline_powerline_fonts = 1

" Ruler rules
set ruler

" Always show the statusbar
set laststatus=2

" Tab completion
set wildmenu
set wildmode=list:longest,full

" Enable mouse
set mouse=a
if !has('nvim')
    if has("mouse_sgr")
        set ttymouse=sgr
    else
        set ttymouse=xterm2
    endif
endif

" Casing
set ignorecase
set smartcase

" The smash escape
inoremap htn <esc>
inoremap hnt <esc>
inoremap thn <esc>
inoremap tnh <esc>
inoremap nth <esc>
inoremap nht <esc>


" hl search results
set hlsearch

if exists('&inccommand')
    set inccommand=nosplit
endif

" When I close a tab, remove the buffer
set nohidden

" Highlight matching parentheses on hover
highlight MatchParen cterm=bold ctermbg=none ctermfg=lightblue

" Set 7 lines to the curors when moving vertical
set scrolloff=7

" increased search
set incsearch

" It's a kinda
set magic

" show matching bracket
set showmatch

" word wrapping at line breaks
set wrap
set linebreak

" Highlight current line
set cursorline

" Make backspace work
set backspace=indent,eol,start

" BASH
set shell=bash

" Save swp file quicker
set updatetime=750

" -------- Mappings ----------

"Set the mapleader
let g:mapleader = ','

"Toggle line numbers with leader-l
set number

function! NumberToggle()
  if(&number != 1)
    set number
  else
    set nonumber
  endif
endfunc

nnoremap <leader>l :call NumberToggle()<cr>

" Tab configuration
noremap <leader>tn :tabnew<cr>
noremap <leader>te :tabedit
noremap <leader>tc :tabclose<cr>
noremap <leader>tm :tabmove

" Reselect visual block after indend/outdent
vnoremap < <gv
vnoremap > >gv

"Open last alternate buffer
noremap <leader><leader> <C-^>

" Press F3 for no smart vim stuff when pasting (autoindent)
" set pastetoggle=<F3>

"Move blocks of text up and down with the arrow keys
noremap <down> :m '>+1<CR>gv=gv
vnoremap <up> :m '<-2<CR>gv=gv

"Underline/overline current line
"nnoremap <leader>== yyPv$r=jyypv$r=
"nnoremap <leader>** yyPv$r*jyypv$r*
"nnoremap <leader>= yypv$r=
"nnoremap <leader>- yypv$r-
"nnoremap <leader>^ yypv$r^
"nnoremap <leader>" yypv$r"

"Clipboard copy pasting
vnoremap <F6> :!xclip -f -sel clip<CR>
noremap <F7> mz:-1r !xclip -o -sel clip<CR>`z

"Make Y work like D and C
map Y y$

" Fix indenting in entire file without moving cursor
"noremap <silent> <F1> mzgg=G`zzz

" Write, pdflatex and open it up
nnoremap <silent> <F4> :w<CR>:!latexmk --lualatex --shell-escape % <CR><CR>

" Make and view pdf
" nnoremap <silent> <F4> :w<CR>:!make && F=% && evince ${F\%.*}.pdf<CR><CR>

" Make
nnoremap <silent> <F2> :w<CR>:!make<CR><CR>


" Make j, k and A work as expected with wrapped lines
nnoremap <silent> j gj
nnoremap <silent> k gk
nnoremap <silent> V :silent! vunmap j<cr>:silent! vunmap k<cr>V
nnoremap <silent> v :vnoremap j gj<cr>:vnoremap k gk<cr>v
vnoremap <silent> V <esc>:silent! vunmap j<cr>:silent! vunmap k<cr>gvV
vnoremap <silent> v <esc>:vnoremap j gj<cr>:vnoremap k gk<cr>gvv
if exists('*getcurpos')
    nnoremap <silent> A :call BetterA()<CR>
endif

function! BetterA()
    normal g$
    let l:wrappos = getcurpos()
    normal $
    let l:fullend = getcurpos()
    call setpos('.', l:wrappos)


    if (l:fullend[2] == l:wrappos[2])
        call feedkeys('a')
    else
        call feedkeys('i')
    endif
endfunction

" Toggle folds with space
"nnoremap <space> za

" Swap ; and : since you use the last one way more often, so why make it
" harder
nnoremap ; :

"Easier split window navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
inoremap <C-h> <C-o><C-w>h
inoremap <C-j> <C-o><C-w>j
inoremap <C-k> <C-o><C-w>k
inoremap <C-l> <C-o><C-w>l
nnoremap <up> <C-w>k
nnoremap <down> <C-w>j
nnoremap <left> <C-w>h
nnoremap <right> <C-w>l
" Fix mapping of <C-j> so it doesn't get overwritten
noremap <SID>I_won’t_ever_type_thiseuehauntauhnaeha <Plug>IMAP_JumpForward

" Workaround for https://github.com/neovim/neovim/issues/2048
if has('nvim')
    nmap <BS> <C-W>h
endif

" Better split window opening
set splitbelow
set splitright


"Turn of highlight
noremap <silent><leader>/ :nohls<CR>

" Tab for autocompletion
function! SuperTab()
    if (strpart(getline('.'),col('.')-2,1)=~'^\s\?$')
        return "\<Tab>"
    else
        return "\<C-n>"
    endif
endfunction
inoremap <Tab> <C-R>=SuperTab()<CR>
